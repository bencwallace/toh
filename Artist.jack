/** Collected methods for drawing a puzzle configuration */
class Artist {

    // to do: these should be made static
	field int xMax, yMax;

    // attributes copied from constructor arguments
    field int n, pegWidth, diskHeight, diskSpacing;

    // attributes computed independently of n
    field int baseTop;
    field int minDiskWidth, maxDiskWidth;
    field Array pegCenters;

    // attributes computed as functions of n
    field int diskWidthDec;
    field int pegHeight;

    // initialize local variables (do not draw)
	constructor Artist new(int num, int pw, int dh, int ds) {
		let n = num;

        // to do: these two should be static
		let xMax = 511;
		let yMax = 255;

        let pegWidth = pw;
		let diskHeight = dh;
        let diskSpacing = ds;

        /* locals independent of n */

        let baseTop = yMax;

        let minDiskWidth = 2 * pegWidth;
        let maxDiskWidth = (xMax - (4 * diskSpacing)) / 3;

        let pegCenters = Array.new(3);
        let pegCenters[0] = xMax / 6;
        let pegCenters[1] = xMax / 2;
        let pegCenters[2] = 5 * xMax / 6;

        /* locals depending on n */

        let diskWidthDec = (maxDiskWidth - minDiskWidth) / (n - 1);
        let pegHeight = (n + 1) * diskHeight;

		return this;
	}

    /* main drawing methods */    

    // draw disk i on peg j at level k (k disks below)
    method void drawDisk(int i, int j, int k) {
        var int x1, x2;

        let x1 = pegCenters[j] - (diskWidth(i) / 2);
        let x2 = pegCenters[j] + (diskWidth(i) / 2);
        do Artist.drawWhiteRect(x1, baseTop - (k * diskHeight) - diskHeight,
                                x2, baseTop - (k * diskHeight));

        return;
    }

    // same as drawDisk but uses a filled black rectangle
    method void drawDiskSelect(int i, int j, int k) {
        var int x1, x2;

        let x1 = pegCenters[j] - (diskWidth(i) / 2);
        let x2 = pegCenters[j] + (diskWidth(i) / 2);
        do Screen.setColor(true);
        do Screen.drawRectangle(x1, baseTop - (k * diskHeight) - diskHeight,
                                x2, baseTop - (k * diskHeight));

        return;
    }

    // draw three pegs
    method void drawPegs() {
        var int i;

        do Screen.setColor(true);

        let i = 0;
        while (i < 3) {
            do Screen.drawRectangle(pegCenters[i] - (pegWidth / 2),
                                baseTop - pegHeight,
                                pegCenters[i] + (pegWidth / 2),
                                baseTop);
            let i = i + 1;
        }

        return;
    }

    /* draw helpers */

    // draw a transparent rectangle with a black border
    function void drawFrame(int x1, int y1, int x2, int y2) {
        do Screen.setColor(true);
        do Screen.drawLine(x1, y1, x2, y1);
        do Screen.drawLine(x1, y1, x1, y2);
        do Screen.drawLine(x1, y2, x2, y2);
        do Screen.drawLine(x2, y1, x2, y2);

        return;
    }

    // draw a white rectangle white a black border
    function void drawWhiteRect(int x1, int y1, int x2, int y2) {
        do Artist.drawFrame(x1, y1, x2, y2);

        do Screen.setColor(false);
        do Screen.drawRectangle(x1 + 1, y1 + 1, x2 - 1, y2 - 1);

        return;
    }

    /* other helpers */

    // width of the i-th disk (smallest disk when i = 1)
    method int diskWidth(int i) {
        return minDiskWidth + ((i - 1) * diskWidthDec);
    }

    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

}