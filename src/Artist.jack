/** Collected methods for drawing a puzzle configuration */
class Artist {

    static int yMax;

    // fields copied from constructor arguments
    field int n, pegWidth, diskHeight, diskSpacing;

    // fields computed independently of n
    field int minDiskWidth;
    field Array pegCenters;

    // fields computed as functions of n
    field int diskWidthDec;
    field int pegHeight;

    // initialize local variables (do not draw)
	constructor Artist new(int numDisks, int pw, int dh, int ds) {
        var int xMax, maxDiskWidth;

        /* static fields */

        let yMax = 255;

        /* fields copied from arguments */

		let n = numDisks;
        let pegWidth = pw;
		let diskHeight = dh;
        let diskSpacing = ds;

        /* fields independent of n */

        // disks must fit on pegs
        let minDiskWidth = 2 * pegWidth;

        // ensure that large disks fit on adjacent pegs
        let pegCenters = Array.new(3);
        let xMax = 511;
        let pegCenters[0] = xMax / 6;
        let pegCenters[1] = xMax / 2;
        let pegCenters[2] = 5 * xMax / 6;

        /* fields depending on n */

        // ensure that largest disk fits on pegs
        let maxDiskWidth = (xMax - (4 * diskSpacing)) / 3;
        // decrease disk size to form a smooth tower
        if (n > 1) {
            let diskWidthDec = (maxDiskWidth - minDiskWidth) / (n - 1);
        } else {
            let diskWidthDec = 0;
        }
        // ensure that a tower fits on a peg
        let pegHeight = (n + 1) * diskHeight;

		return this;
	}

    /* main drawing methods */    

    // draw disk i on peg j at level k (k disks below)
    method void drawDisk(int i, int j, int k) {
        var int x1, x2;

        let x1 = pegCenters[j] - (diskWidth(i) / 2);
        let x2 = pegCenters[j] + (diskWidth(i) / 2);
        do Artist.drawWhiteRect(x1, yMax - (k * diskHeight) - diskHeight,
                                x2, yMax - (k * diskHeight));

        return;
    }

    // same as drawDisk but uses a filled black rectangle
    method void drawDiskSelect(int i, int j, int k) {
        var int x1, x2;

        let x1 = pegCenters[j] - (diskWidth(i) / 2);
        let x2 = pegCenters[j] + (diskWidth(i) / 2);
        do Screen.setColor(true);
        do Screen.drawRectangle(x1, yMax - (k * diskHeight) - diskHeight,
                                x2, yMax - (k * diskHeight));

        return;
    }

    // draw three pegs
    method void drawPegs() {
        var int i;

        do Screen.setColor(true);

        let i = 0;
        while (i < 3) {
            do Screen.drawRectangle(pegCenters[i] - (pegWidth / 2),
                                yMax - pegHeight,
                                pegCenters[i] + (pegWidth / 2),
                                yMax);
            let i = i + 1;
        }

        return;
    }

    /* draw helpers */

    // draw a white rectangle white a black border
    function void drawWhiteRect(int x1, int y1, int x2, int y2) {
        do Screen.setColor(true);
        do Screen.drawRectangle(x1, y1, x2, y2);

        do Screen.setColor(false);
        do Screen.drawRectangle(x1 + 1, y1 + 1, x2 - 1, y2 - 1);

        return;
    }

    /* other helpers */

    // width of the i-th disk (smallest disk when i = 1)
    method int diskWidth(int i) {
        return minDiskWidth + ((i - 1) * diskWidthDec);
    }

    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

}